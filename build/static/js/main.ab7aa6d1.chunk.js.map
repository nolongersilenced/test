{"version":3,"sources":["images/lh1.JPG","images/lh5.JPG","images/lh9.JPG","images/lh12.JPG","images/cl1.JPG","images/cl2.JPG","images/cl3.JPG","images/cl7.JPG","scripts/Navbar.js","scripts/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","images","lh1","lh2","lh3","lh4","cl1","cl2","cl3","cl4","Home","tempPhotos","count","map","pic","key","src","alt","this","Component","App","scripts_Navbar","scripts_Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gMCWzBC,MARf,WACE,OACUC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,0MCOZC,EAAS,CAACC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,KAyBlCC,6MApBXC,WAAa,WACT,IAAIC,EAAQ,EACZ,OAAOX,EAAOY,IAAI,SAAAC,GAEd,OADAF,GAAS,EACFf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMe,IAAKH,EAAOI,IAAKF,EAAKG,IAAI,mFAK1D,OACYpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,gCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACVkB,KAAKP,sBAffQ,aCDJC,MAVf,WACE,OACUvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAACuB,EAAD,QCEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ab7aa6d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lh1.336a77b9.JPG\";","module.exports = __webpack_public_path__ + \"static/media/lh5.9ba1861c.JPG\";","module.exports = __webpack_public_path__ + \"static/media/lh9.05edd090.JPG\";","module.exports = __webpack_public_path__ + \"static/media/lh12.9eab7de8.JPG\";","module.exports = __webpack_public_path__ + \"static/media/cl1.37358660.JPG\";","module.exports = __webpack_public_path__ + \"static/media/cl2.4a4bef33.JPG\";","module.exports = __webpack_public_path__ + \"static/media/cl3.c443f8a5.JPG\";","module.exports = __webpack_public_path__ + \"static/media/cl7.97e503a8.JPG\";","import React from 'react';\nimport '../App.css';\n\nfunction Navbar() {\n  return (\n            <div className=\"Navbar\">\n                <h1 className=\"siteTitle\">NO LONGER SILENCED</h1>\n            </div>\n  );\n}\n\nexport default Navbar;","import React, {Component} from 'react';\nimport './Home.css';\nimport lh1 from '../../images/lh1.JPG';\nimport lh2 from '../../images/lh5.JPG';\nimport lh3 from '../../images/lh9.JPG';\nimport lh4 from '../../images/lh12.JPG';\nimport cl1 from '../../images/cl1.JPG';\nimport cl2 from '../../images/cl2.JPG';\nimport cl3 from '../../images/cl3.JPG';\nimport cl4 from '../../images/cl7.JPG';\n\n\n\nlet images = [lh1, lh2, lh3, lh4, cl1, cl2, cl3, cl4]\n\n\nclass Home extends Component {\n\n    tempPhotos = () => {\n        let count = 0\n        return images.map(pic => {\n            count += 1\n            return <img className=\"art\" key={count} src={pic} alt=\"Art\"/>\n        })\n    }\n\n    render () {\n        return (\n                    <div className=\"appBody\">\n                        <h1 className=\"pageTitle\">Currently Under Construction</h1>\n                        <div className=\"photoDiv\">\n                            {this.tempPhotos()}\n                        </div>\n                    </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Navbar from './scripts/Navbar';\nimport Home from './scripts/Home/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n            <div className=\"fullApplication\">\n                <Navbar/>\n                <div className=\"background-image\"></div>\n                <Home/>\n            </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}